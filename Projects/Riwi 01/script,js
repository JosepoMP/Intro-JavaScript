// ======= GLOBAL STATE =======
let currentUser = null;
let events = [];
let users = [];
let registrations = [];

// ======= INITIALIZATION =======
document.addEventListener("DOMContentLoaded", () => {
  loadData().then(() => {
    checkAuth();
    setupStaticEventListeners();
  });
});

// ======= STATIC EVENT LISTENERS (ONCE) =======
const setupStaticEventListeners = () => {
  document.getElementById("login-form").addEventListener("submit", handleLogin);
  document.getElementById("register-form").addEventListener("submit", handleRegister);
  document.getElementById("event-form").addEventListener("submit", handleEventSubmit);

  // Modal close on click outside
  window.addEventListener("click", (e) => {
    const modal = document.getElementById("modal");
    if (e.target === modal) closeModal();
  });

  // Dashboard navigation (SPA)
  document.querySelectorAll(".dashboard-nav button").forEach(btn => {
    btn.addEventListener("click", (e) => {
      const text = btn.textContent;
      if (text === "Ver Eventos") showEvents();
      else if (text === "Mis Eventos") showMyEvents();
      else if (text === "Panel Admin") showAdmin();
    });
  });

  // SPA navigation for login/register
  document.querySelectorAll("[data-nav]").forEach(el => {
    el.addEventListener("click", (e) => {
      e.preventDefault();
      const nav = el.getAttribute("data-nav");
      if (nav === "login") showLogin();
      else if (nav === "register") showRegister();
    });
  });

  // Logout
  document.getElementById("logout-btn")?.addEventListener("click", logout);
};

// ======= DATA LOADING =======
const loadData = async () => {
  try {
    const response = await fetch("db.json");
    const data = await response.json();
    events = data.events ?? [];
    users = data.users ?? [];
    registrations = data.registrations ?? [];
  } catch (error) {
    console.error("Error cargando datos:", error);
    loadDefaultData();
  }
};

const loadDefaultData = () => {
  users = [
    {
      id: 1,
      username: "admin",
      email: "admin@eventhub.com",
      password: "admin123",
      firstName: "Admin",
      lastName: "User",
      role: "admin",
    },
    {
      id: 2,
      username: "user",
      email: "user@example.com",
      password: "user123",
      firstName: "John",
      lastName: "Doe",
      role: "user",
    },
  ];
  events = [
    {
      id: 1,
      title: "Conferencia de Tecnología 2024",
      description: "Una conferencia sobre las últimas tendencias en tecnología.",
      date: "2024-03-15",
      time: "09:00",
      location: "Centro de Convenciones Madrid",
      category: "technology",
      capacity: 200,
      price: 150,
      createdBy: 1,
      registeredCount: 0,
    },
    {
      id: 2,
      title: "Workshop de JavaScript",
      description: "Aprende JavaScript avanzado con expertos.",
      date: "2024-02-20",
      time: "14:00",
      location: "Aula Magna Universidad",
      category: "education",
      capacity: 50,
      price: 75,
      createdBy: 1,
      registeredCount: 0,
    },
  ];
  registrations = [];
};

// ======= AUTH & NAVIGATION =======
const checkAuth = () => {
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    currentUser = JSON.parse(savedUser);
    showDashboard();
  } else {
    showLogin();
  }
};

const showLogin = () => {
  hideAllPages();
  document.getElementById("login-page").style.display = "block";
  updateNavigation();
  document.getElementById("login-form").reset();
};

const showRegister = () => {
  hideAllPages();
  document.getElementById("register-page").style.display = "block";
  updateNavigation();
  document.getElementById("register-form").reset();
};

const showDashboard = () => {
  hideAllPages();
  document.getElementById("dashboard-page").style.display = "block";
  updateNavigation();
  showEvents();
};

const hideAllPages = () => {
  document.querySelectorAll(".page").forEach((page) => (page.style.display = "none"));
};

const updateNavigation = () => {
  const navLinks = document.getElementById("nav-links");
  const userMenu = document.getElementById("user-menu");
  const adminBtn = document.getElementById("admin-btn");
  if (currentUser) {
    navLinks.style.display = "none";
    userMenu.style.display = "block";
    document.getElementById("username").textContent = currentUser.firstName;
    if (adminBtn) adminBtn.style.display = currentUser.role === "admin" ? "inline-block" : "none";
  } else {
    navLinks.style.display = "block";
    userMenu.style.display = "none";
    if (adminBtn) adminBtn.style.display = "none";
  }
};

// ======= AUTH HANDLERS =======
const handleLogin = (e) => {
  e.preventDefault();
  const username = document.getElementById("login-username").value.trim();
  const password = document.getElementById("login-password").value;
  const user = users.find((u) => u.username === username && u.password === password);
  if (user) {
    currentUser = user;
    localStorage.setItem("currentUser", JSON.stringify(user));
    showNotification("¡Bienvenido!", "success");
    showDashboard();
  } else {
    showNotification("Usuario o contraseña incorrectos", "error");
  }
};

const handleRegister = (e) => {
  e.preventDefault();
  const username = document.getElementById("reg-username").value.trim();
  const email = document.getElementById("reg-email").value.trim();
  const password = document.getElementById("reg-password").value;
  const firstName = document.getElementById("reg-firstname").value.trim();
  const lastName = document.getElementById("reg-lastname").value.trim();

  if (!username || !email || !password || !firstName || !lastName) {
    showNotification("Completa todos los campos", "error");
    return;
  }

  if (users.some((u) => u.username === username || u.email === email)) {
    showNotification("El usuario o email ya existe", "error");
    return;
  }

  const newUser = {
    id: getNextId(users),
    username,
    email,
    password,
    firstName,
    lastName,
    role: "user",
  };
  users.push(newUser);
  showNotification("¡Registro exitoso! Ahora puedes iniciar sesión", "success");
  showLogin();
};

const logout = () => {
  currentUser = null;
  localStorage.removeItem("currentUser");
  showLogin();
  showNotification("Sesión cerrada", "success");
};

// ======= DASHBOARD & EVENTS =======
const showEvents = () => {
  updateDashboardNav("Ver Eventos");
  const content = document.getElementById("dashboard-content");
  // Filter, sort, and search UI
  content.innerHTML = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; flex-wrap: wrap; gap: 1rem;">
      <h3>Eventos Disponibles</h3>
      <div style="display: flex; gap: 0.5rem; align-items: center;">
        <input id="event-search" type="text" placeholder="Buscar evento..." style="padding: 0.3rem; border-radius: 4px; border: 1px solid #ccc;">
        <select id="event-category-filter" style="padding: 0.3rem; border-radius: 4px; border: 1px solid #ccc;">
          <option value="">Todas las categorías</option>
          <option value="technology">Tecnología</option>
          <option value="music">Música</option>
          <option value="sports">Deportes</option>
          <option value="education">Educación</option>
          <option value="art">Arte</option>
        </select>
        <select id="event-sort" style="padding: 0.3rem; border-radius: 4px; border: 1px solid #ccc;">
          <option value="date-asc">Fecha ↑</option>
          <option value="date-desc">Fecha ↓</option>
          <option value="price-asc">Precio ↑</option>
          <option value="price-desc">Precio ↓</option>
        </select>
        ${currentUser.role === "admin" ? '<button id="create-event-btn" class="btn-primary">Crear Evento</button>' : ""}
      </div>
    </div>
    <div class="events-grid" id="events-grid"></div>
  `;
  if (currentUser.role === "admin") {
    document.getElementById("create-event-btn").onclick = () => openEventModal();
  }
  // Initial render
  renderEventsGrid();
  // Attach filter/sort/search handlers
  document.getElementById("event-search").addEventListener("input", renderEventsGrid);
  document.getElementById("event-category-filter").addEventListener("change", renderEventsGrid);
  document.getElementById("event-sort").addEventListener("change", renderEventsGrid);
};

function renderEventsGrid() {
  const search = document.getElementById("event-search").value.trim().toLowerCase();
  const category = document.getElementById("event-category-filter").value;
  const sort = document.getElementById("event-sort").value;
  let filtered = events.slice();

  if (search) {
    filtered = filtered.filter(e =>
      e.title.toLowerCase().includes(search) ||
      e.description.toLowerCase().includes(search) ||
      e.location.toLowerCase().includes(search)
    );
  }
  if (category) {
    filtered = filtered.filter(e => e.category === category);
  }
  filtered.sort((a, b) => {
    switch (sort) {
      case "date-asc":
        return a.date.localeCompare(b.date) || a.time.localeCompare(b.time);
      case "date-desc":
        return b.date.localeCompare(a.date) || b.time.localeCompare(a.time);
      case "price-asc":
        return a.price - b.price;
      case "price-desc":
        return b.price - a.price;
      default:
        return 0;
    }
  });

  const grid = document.getElementById("events-grid");
  if (!filtered.length) {
    grid.innerHTML = `<p style="grid-column: 1/-1;">No hay eventos disponibles.</p>`;
  } else {
    grid.innerHTML = filtered.map(eventCardHTML).join("");
  }
  attachEventCardHandlers();
}

const eventCardHTML = (event) => {
  const isRegistered = registrations.some((r) => r.eventId === event.id && r.userId === currentUser.id);
  const canEdit = currentUser.role === "admin" || event.createdBy === currentUser.id;
  const isFull = (event.registeredCount ?? 0) >= event.capacity;
  const eventDate = new Date(`${event.date}T${event.time}`);
  const now = new Date();
  const isPast = eventDate < now;
  return `
    <div class="event-card" data-event-id="${event.id}">
      <h3>${event.title}</h3>
      <p><strong>Fecha:</strong> ${event.date} a las ${event.time}</p>
      <p><strong>Ubicación:</strong> ${event.location}</p>
      <p><strong>Categoría:</strong> ${getCategoryName(event.category)}</p>
      <p><strong>Precio:</strong> ${event.price}€</p>
      <p><strong>Capacidad:</strong> ${event.registeredCount ?? 0}/${event.capacity}</p>
      <p>${event.description}</p>
      <div class="event-meta">
        <div>
          ${
            isPast
              ? `<span class="badge badge-gray">Finalizado</span>`
              : isRegistered
                ? `<button class="btn-warning unregister-btn">Cancelar Registro</button>`
                : isFull
                  ? `<button class="btn-disabled" disabled>Lleno</button>`
                  : `<button class="btn-success register-btn">Registrarse</button>`
          }
        </div>
        ${canEdit
          ? `<div>
              <button class="btn-primary edit-btn">Editar</button>
              <button class="btn-danger delete-btn">Eliminar</button>
            </div>`
          : ""
        }
      </div>
    </div>
  `;
};

const attachEventCardHandlers = () => {
  document.querySelectorAll(".event-card").forEach(card => {
    const eventId = Number(card.dataset.eventId);
    card.querySelectorAll(".register-btn").forEach(btn => btn.onclick = () => registerForEvent(eventId));
    card.querySelectorAll(".unregister-btn").forEach(btn => btn.onclick = () => unregisterFromEvent(eventId));
    card.querySelectorAll(".edit-btn").forEach(btn => btn.onclick = () => editEvent(eventId));
    card.querySelectorAll(".delete-btn").forEach(btn => btn.onclick = () => deleteEvent(eventId));
  });
};

const showMyEvents = () => {
  updateDashboardNav("Mis Eventos");
  const content = document.getElementById("dashboard-content");
  const myEvents = events.filter(e => registrations.some(r => r.eventId === e.id && r.userId === currentUser.id));
  content.innerHTML = `
    <h3>Mis Eventos Registrados</h3>
    ${myEvents.length === 0
      ? "<p>No tienes eventos registrados.</p>"
      : `<div class="events-grid">
          ${myEvents.map(event => `
            <div class="event-card" data-event-id="${event.id}">
              <h3>${event.title}</h3>
              <p><strong>Fecha:</strong> ${event.date} a las ${event.time}</p>
              <p><strong>Ubicación:</strong> ${event.location}</p>
              <p><strong>Precio:</strong> ${event.price}€</p>
              <p>${event.description}</p>
              <div class="event-meta">
                <button class="btn-warning unregister-btn">Cancelar Registro</button>
              </div>
            </div>
          `).join("")}
        </div>`
    }
  `;
  attachEventCardHandlers();
};

const showAdmin = () => {
  if (currentUser.role !== "admin") {
    showNotification("No tienes permisos de administrador", "error");
    return;
  }
  updateDashboardNav("Panel Admin");
  const content = document.getElementById("dashboard-content");
  content.innerHTML = `
    <h3>Panel de Administración</h3>
    <div style="margin-bottom: 2rem;">
      <h4>Estadísticas</h4>
      <p>Total de usuarios: ${users.length}</p>
      <p>Total de eventos: ${events.length}</p>
      <p>Total de registros: ${registrations.length}</p>
    </div>
    <h4>Gestión de Usuarios</h4>
    <table class="admin-table">
      <thead>
        <tr>
          <th>ID</th><th>Usuario</th><th>Email</th><th>Nombre</th><th>Rol</th><th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        ${users.map(user => `
          <tr>
            <td>${user.id}</td>
            <td>${user.username}</td>
            <td>${user.email}</td>
            <td>${user.firstName} ${user.lastName}</td>
            <td>${user.role}</td>
            <td>
              ${user.id !== currentUser.id
                ? `<button class="btn-danger delete-user-btn" data-user-id="${user.id}">Eliminar</button>`
                : "<span>-</span>"
              }
            </td>
          </tr>
        `).join("")}
      </tbody>
    </table>
    <h4 style="margin-top: 2rem;">Gestión de Registros</h4>
    <table class="admin-table">
      <thead>
        <tr>
          <th>Usuario</th><th>Evento</th><th>Fecha Registro</th><th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        ${registrations.map(reg => {
          const user = users.find(u => u.id === reg.userId);
          const event = events.find(e => e.id === reg.eventId);
          return `
            <tr>
              <td>${user ? `${user.firstName} ${user.lastName}` : "Usuario eliminado"}</td>
              <td>${event ? event.title : "Evento eliminado"}</td>
              <td>${reg.registeredAt ? new Date(reg.registeredAt).toLocaleString() : "N/A"}</td>
              <td>
                <button class="btn-danger delete-reg-btn" data-reg-id="${reg.id}">Eliminar</button>
              </td>
            </tr>
          `;
        }).join("")}
      </tbody>
    </table>
  `;
  // Attach admin action handlers
  document.querySelectorAll(".delete-user-btn").forEach(btn =>
    btn.onclick = () => deleteUser(Number(btn.dataset.userId))
  );
  document.querySelectorAll(".delete-reg-btn").forEach(btn =>
    btn.onclick = () => deleteRegistration(Number(btn.dataset.regId))
  );
};

const updateDashboardNav = (activeTab) => {
  document.querySelectorAll(".dashboard-nav button").forEach(btn => {
    btn.classList.toggle("active", btn.textContent === activeTab);
  });
};

// ======= EVENT REGISTRATION =======
const registerForEvent = (eventId) => {
  const event = events.find(e => e.id === eventId);
  if (!event) return;
  if (registrations.some(r => r.eventId === eventId && r.userId === currentUser.id)) {
    showNotification("Ya estás registrado en este evento", "error");
    return;
  }
  if ((event.registeredCount ?? 0) >= event.capacity) {
    showNotification("El evento está lleno", "error");
    return;
  }
  const eventDate = new Date(`${event.date}T${event.time}`);
  if (eventDate < new Date()) {
    showNotification("No puedes registrarte a un evento pasado", "error");
    return;
  }
  registrations.push({
    id: getNextId(registrations),
    userId: currentUser.id,
    eventId,
    registeredAt: new Date().toISOString(),
  });
  event.registeredCount = (event.registeredCount ?? 0) + 1;
  showNotification("¡Te has registrado exitosamente!", "success");
  renderEventsGrid();
};

const unregisterFromEvent = (eventId) => {
  const regIndex = registrations.findIndex(r => r.eventId === eventId && r.userId === currentUser.id);
  if (regIndex === -1) {
    showNotification("No estás registrado en este evento", "error");
    return;
  }
  registrations.splice(regIndex, 1);
  const event = events.find(e => e.id === eventId);
  if (event && event.registeredCount > 0) event.registeredCount--;
  showNotification("Registro cancelado", "success");
  renderEventsGrid();
  if (document.querySelector(".dashboard-nav .active")?.textContent === "Mis Eventos") {
    showMyEvents();
  }
};

// ======= EVENT CRUD =======
const openEventModal = (eventId = null) => {
  const modal = document.getElementById("modal");
  const title = document.getElementById("modal-title");
  const form = document.getElementById("event-form");
  form.reset();
  if (eventId) {
    const event = events.find(e => e.id === eventId);
    title.textContent = "Editar Evento";
    document.getElementById("event-id").value = event.id;
    document.getElementById("event-title").value = event.title;
    document.getElementById("event-description").value = event.description;
    document.getElementById("event-date").value = event.date;
    document.getElementById("event-time").value = event.time;
    document.getElementById("event-location").value = event.location;
    document.getElementById("event-capacity").value = event.capacity;
    document.getElementById("event-category").value = event.category;
    document.getElementById("event-price").value = event.price;
  } else {
    title.textContent = "Crear Evento";
    document.getElementById("event-id").value = "";
  }
  modal.style.display = "block";
};

const editEvent = (eventId) => openEventModal(eventId);

const handleEventSubmit = (e) => {
  e.preventDefault();
  const eventId = document.getElementById("event-id").value;
  const eventData = {
    title: document.getElementById("event-title").value.trim(),
    description: document.getElementById("event-description").value.trim(),
    date: document.getElementById("event-date").value,
    time: document.getElementById("event-time").value,
    location: document.getElementById("event-location").value.trim(),
    capacity: Number.parseInt(document.getElementById("event-capacity").value),
    category: document.getElementById("event-category").value,
    price: Number.parseFloat(document.getElementById("event-price").value) || 0,
  };
  // Validation
  if (!eventData.title || !eventData.date || !eventData.time || !eventData.location || !eventData.capacity || !eventData.category) {
    showNotification("Completa todos los campos obligatorios", "error");
    return;
  }
  if (eventData.capacity <= 0) {
    showNotification("La capacidad debe ser mayor que 0", "error");
    return;
  }
  if (eventData.price < 0) {
    showNotification("El precio no puede ser negativo", "error");
    return;
  }
  if (eventId) {
    const eventIndex = events.findIndex(e => e.id === Number(eventId));
    if (eventIndex !== -1) {
      // If capacity is reduced, remove registrations if needed
      if (eventData.capacity < (events[eventIndex].registeredCount ?? 0)) {
        showNotification("No puedes reducir la capacidad por debajo de los registrados", "error");
        return;
      }
      events[eventIndex] = { ...events[eventIndex], ...eventData };
      showNotification("Evento actualizado exitosamente", "success");
    }
  } else {
    events.push({
      id: getNextId(events),
      ...eventData,
      createdBy: currentUser.id,
      registeredCount: 0,
    });
    showNotification("Evento creado exitosamente", "success");
  }
  closeModal();
  renderEventsGrid();
};

const deleteEvent = (eventId) => {
  if (!confirm("¿Estás seguro de que quieres eliminar este evento?")) return;
  const eventIndex = events.findIndex(e => e.id === eventId);
  if (eventIndex !== -1) {
    events.splice(eventIndex, 1);
    registrations = registrations.filter(r => r.eventId !== eventId);
    showNotification("Evento eliminado", "success");
    renderEventsGrid();
    if (document.querySelector(".dashboard-nav .active")?.textContent === "Mis Eventos") {
      showMyEvents();
    }
  }
};

// ======= ADMIN ACTIONS =======
const deleteUser = (userId) => {
  if (!confirm("¿Estás seguro de que quieres eliminar este usuario?")) return;
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    users.splice(userIndex, 1);
    registrations = registrations.filter(r => r.userId !== userId);
    showNotification("Usuario eliminado", "success");
    showAdmin();
  }
};

const deleteRegistration = (regId) => {
  if (!confirm("¿Estás seguro de que quieres eliminar este registro?")) return;
  const regIndex = registrations.findIndex(r => r.id === regId);
  if (regIndex !== -1) {
    const registration = registrations[regIndex];
    registrations.splice(regIndex, 1);
    const event = events.find(e => e.id === registration.eventId);
    if (event && event.registeredCount > 0) event.registeredCount--;
    showNotification("Registro eliminado", "success");
    showAdmin();
  }
};

// ======= UTILS =======
const closeModal = () => {
  document.getElementById("modal").style.display = "none";
};

const getCategoryName = (category) => ({
  technology: "Tecnología",
  music: "Música",
  sports: "Deportes",
  education: "Educación",
  art: "Arte",
}[category] ?? category);

const showNotification = (message, type = "success") => {
  const notification = document.getElementById("notification");
  notification.textContent = message;
  notification.className = `notification ${type}`;
  notification.style.display = "block";
  setTimeout(() => {
    notification.style.display = "none";
  }, 3000);
};

const getNextId = (arr) => arr.length ? Math.max(...arr.map(x => x.id ?? 0)) + 1 : 1;

// ======= EXPORT GLOBALS FOR INLINE HTML HANDLERS =======
window.logout = logout;
window.showRegister = showRegister;
window.showEvents = showEvents;
window.showMyEvents = showMyEvents;
window.showAdmin = showAdmin;
window.openEventModal = openEventModal;
