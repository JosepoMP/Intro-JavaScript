// Variables globales
let currentUser = null
let events = []
let users = []
let registrations = []

// Inicialización
document.addEventListener("DOMContentLoaded", () => {
  loadData()
  checkAuth()
  setupEventListeners()
})

// Configurar event listeners
function setupEventListeners() {
  // Formulario de login
  document.getElementById("login-form").addEventListener("submit", handleLogin)

  // Formulario de registro
  document.getElementById("register-form").addEventListener("submit", handleRegister)

  // Formulario de eventos
  document.getElementById("event-form").addEventListener("submit", handleEventSubmit)
}

// Cargar datos desde db.json (simulado)
async function loadData() {
  try {
    const response = await fetch("db.json")
    const data = await response.json()
    events = data.events || []
    users = data.users || []
    registrations = data.registrations || []
  } catch (error) {
    console.error("Error cargando datos:", error)
    // Datos de ejemplo si no se puede cargar db.json
    loadDefaultData()
  }
}

// Datos por defecto
function loadDefaultData() {
  users = [
    {
      id: 1,
      username: "admin",
      email: "admin@eventhub.com",
      password: "admin123",
      firstName: "Admin",
      lastName: "User",
      role: "admin",
    },
    {
      id: 2,
      username: "user",
      email: "user@example.com",
      password: "user123",
      firstName: "John",
      lastName: "Doe",
      role: "user",
    },
  ]

  events = [
    {
      id: 1,
      title: "Conferencia de Tecnología 2024",
      description: "Una conferencia sobre las últimas tendencias en tecnología.",
      date: "2024-03-15",
      time: "09:00",
      location: "Centro de Convenciones Madrid",
      category: "technology",
      capacity: 200,
      price: 150,
      createdBy: 1,
      registeredCount: 0,
    },
    {
      id: 2,
      title: "Workshop de JavaScript",
      description: "Aprende JavaScript avanzado con expertos.",
      date: "2024-02-20",
      time: "14:00",
      location: "Aula Magna Universidad",
      category: "education",
      capacity: 50,
      price: 75,
      createdBy: 1,
      registeredCount: 0,
    },
  ]

  registrations = []
}

// Verificar autenticación
function checkAuth() {
  const savedUser = localStorage.getItem("currentUser")
  if (savedUser) {
    currentUser = JSON.parse(savedUser)
    showDashboard()
  } else {
    showLogin()
  }
}

// Mostrar página de login
function showLogin() {
  hideAllPages()
  document.getElementById("login-page").style.display = "block"
  updateNavigation()
}

// Mostrar página de registro
function showRegister() {
  hideAllPages()
  document.getElementById("register-page").style.display = "block"
  updateNavigation()
}

// Mostrar dashboard
function showDashboard() {
  hideAllPages()
  document.getElementById("dashboard-page").style.display = "block"
  updateNavigation()
  showEvents() // Mostrar eventos por defecto
}

// Ocultar todas las páginas
function hideAllPages() {
  const pages = document.querySelectorAll(".page")
  pages.forEach((page) => (page.style.display = "none"))
}

// Actualizar navegación
function updateNavigation() {
  const navLinks = document.getElementById("nav-links")
  const userMenu = document.getElementById("user-menu")
  const adminBtn = document.getElementById("admin-btn")

  if (currentUser) {
    navLinks.style.display = "none"
    userMenu.style.display = "block"
    document.getElementById("username").textContent = currentUser.firstName

    if (currentUser.role === "admin") {
      adminBtn.style.display = "inline-block"
    }
  } else {
    navLinks.style.display = "block"
    userMenu.style.display = "none"
  }
}

// Manejar login
function handleLogin(e) {
  e.preventDefault()

  const username = document.getElementById("login-username").value
  const password = document.getElementById("login-password").value

  const user = users.find((u) => u.username === username && u.password === password)

  if (user) {
    currentUser = user
    localStorage.setItem("currentUser", JSON.stringify(user))
    showNotification("¡Bienvenido!", "success")
    showDashboard()
  } else {
    showNotification("Usuario o contraseña incorrectos", "error")
  }
}

// Manejar registro
function handleRegister(e) {
  e.preventDefault()

  const username = document.getElementById("reg-username").value
  const email = document.getElementById("reg-email").value
  const password = document.getElementById("reg-password").value
  const firstName = document.getElementById("reg-firstname").value
  const lastName = document.getElementById("reg-lastname").value

  // Verificar si el usuario ya existe
  if (users.find((u) => u.username === username || u.email === email)) {
    showNotification("El usuario o email ya existe", "error")
    return
  }

  // Crear nuevo usuario
  const newUser = {
    id: users.length + 1,
    username,
    email,
    password,
    firstName,
    lastName,
    role: "user",
  }

  users.push(newUser)
  showNotification("¡Registro exitoso! Ahora puedes iniciar sesión", "success")
  showLogin()
}

// Cerrar sesión
function logout() {
  currentUser = null
  localStorage.removeItem("currentUser")
  showLogin()
  showNotification("Sesión cerrada", "success")
}

// Mostrar eventos
function showEvents() {
  updateDashboardNav("Ver Eventos")
  const content = document.getElementById("dashboard-content")

  let html = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <h3>Eventos Disponibles</h3>
            ${currentUser.role === "admin" ? '<button onclick="openEventModal()" class="btn-primary">Crear Evento</button>' : ""}
        </div>
        <div class="events-grid">
    `

  events.forEach((event) => {
    const isRegistered = registrations.some((r) => r.eventId === event.id && r.userId === currentUser.id)
    const canEdit = currentUser.role === "admin" || event.createdBy === currentUser.id

    html += `
            <div class="event-card">
                <h3>${event.title}</h3>
                <p><strong>Fecha:</strong> ${event.date} a las ${event.time}</p>
                <p><strong>Ubicación:</strong> ${event.location}</p>
                <p><strong>Categoría:</strong> ${getCategoryName(event.category)}</p>
                <p><strong>Precio:</strong> ${event.price}€</p>
                <p><strong>Capacidad:</strong> ${event.registeredCount || 0}/${event.capacity}</p>
                <p>${event.description}</p>
                <div class="event-meta">
                    <div>
                        ${
                          isRegistered
                            ? '<button onclick="unregisterFromEvent(' +
                              event.id +
                              ')" class="btn-warning">Cancelar Registro</button>'
                            : '<button onclick="registerForEvent(' +
                              event.id +
                              ')" class="btn-success">Registrarse</button>'
                        }
                    </div>
                    ${
                      canEdit
                        ? `
                        <div>
                            <button onclick="editEvent(${event.id})" class="btn-primary">Editar</button>
                            <button onclick="deleteEvent(${event.id})" class="btn-danger">Eliminar</button>
                        </div>
                    `
                        : ""
                    }
                </div>
            </div>
        `
  })

  html += "</div>"
  content.innerHTML = html
}

// Mostrar mis eventos
function showMyEvents() {
  updateDashboardNav("Mis Eventos")
  const content = document.getElementById("dashboard-content")

  const myRegistrations = registrations.filter((r) => r.userId === currentUser.id)
  const myEvents = events.filter((e) => myRegistrations.some((r) => r.eventId === e.id))

  let html = "<h3>Mis Eventos Registrados</h3>"

  if (myEvents.length === 0) {
    html += "<p>No tienes eventos registrados.</p>"
  } else {
    html += '<div class="events-grid">'
    myEvents.forEach((event) => {
      html += `
                <div class="event-card">
                    <h3>${event.title}</h3>
                    <p><strong>Fecha:</strong> ${event.date} a las ${event.time}</p>
                    <p><strong>Ubicación:</strong> ${event.location}</p>
                    <p><strong>Precio:</strong> ${event.price}€</p>
                    <p>${event.description}</p>
                    <div class="event-meta">
                        <button onclick="unregisterFromEvent(${event.id})" class="btn-warning">Cancelar Registro</button>
                    </div>
                </div>
            `
    })
    html += "</div>"
  }

  content.innerHTML = html
}

// Mostrar panel de administración
function showAdmin() {
  if (currentUser.role !== "admin") {
    showNotification("No tienes permisos de administrador", "error")
    return
  }

  updateDashboardNav("Panel Admin")
  const content = document.getElementById("dashboard-content")

  let html = `
        <h3>Panel de Administración</h3>
        <div style="margin-bottom: 2rem;">
            <h4>Estadísticas</h4>
            <p>Total de usuarios: ${users.length}</p>
            <p>Total de eventos: ${events.length}</p>
            <p>Total de registros: ${registrations.length}</p>
        </div>
        
        <h4>Gestión de Usuarios</h4>
        <table class="admin-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Usuario</th>
                    <th>Email</th>
                    <th>Nombre</th>
                    <th>Rol</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
    `

  users.forEach((user) => {
    html += `
            <tr>
                <td>${user.id}</td>
                <td>${user.username}</td>
                <td>${user.email}</td>
                <td>${user.firstName} ${user.lastName}</td>
                <td>${user.role}</td>
                <td>
                    ${
                      user.id !== currentUser.id
                        ? `<button onclick="deleteUser(${user.id})" class="btn-danger">Eliminar</button>`
                        : "<span>-</span>"
                    }
                </td>
            </tr>
        `
  })

  html += `
            </tbody>
        </table>
        
        <h4 style="margin-top: 2rem;">Gestión de Registros</h4>
        <table class="admin-table">
            <thead>
                <tr>
                    <th>Usuario</th>
                    <th>Evento</th>
                    <th>Fecha Registro</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
    `

  registrations.forEach((reg) => {
    const user = users.find((u) => u.id === reg.userId)
    const event = events.find((e) => e.id === reg.eventId)

    html += `
            <tr>
                <td>${user ? user.firstName + " " + user.lastName : "Usuario eliminado"}</td>
                <td>${event ? event.title : "Evento eliminado"}</td>
                <td>${reg.registeredAt || "N/A"}</td>
                <td>
                    <button onclick="deleteRegistration(${reg.id})" class="btn-danger">Eliminar</button>
                </td>
            </tr>
        `
  })

  html += "</tbody></table>"
  content.innerHTML = html
}

// Actualizar navegación del dashboard
function updateDashboardNav(activeTab) {
  const buttons = document.querySelectorAll(".dashboard-nav button")
  buttons.forEach((btn) => btn.classList.remove("active"))

  const activeButton = Array.from(buttons).find((btn) => btn.textContent === activeTab)
  if (activeButton) {
    activeButton.classList.add("active")
  }
}

// Registrarse a un evento
function registerForEvent(eventId) {
  const event = events.find((e) => e.id === eventId)
  if (!event) return

  // Verificar si ya está registrado
  if (registrations.some((r) => r.eventId === eventId && r.userId === currentUser.id)) {
    showNotification("Ya estás registrado en este evento", "error")
    return
  }

  // Verificar capacidad
  const currentRegistrations = registrations.filter((r) => r.eventId === eventId).length
  if (currentRegistrations >= event.capacity) {
    showNotification("El evento está lleno", "error")
    return
  }

  // Crear registro
  const newRegistration = {
    id: registrations.length + 1,
    userId: currentUser.id,
    eventId: eventId,
    registeredAt: new Date().toISOString(),
  }

  registrations.push(newRegistration)

  // Actualizar contador
  event.registeredCount = (event.registeredCount || 0) + 1

  showNotification("¡Te has registrado exitosamente!", "success")
  showEvents() // Refrescar vista
}

// Cancelar registro de evento
function unregisterFromEvent(eventId) {
  const registrationIndex = registrations.findIndex((r) => r.eventId === eventId && r.userId === currentUser.id)

  if (registrationIndex === -1) {
    showNotification("No estás registrado en este evento", "error")
    return
  }

  registrations.splice(registrationIndex, 1)

  // Actualizar contador
  const event = events.find((e) => e.id === eventId)
  if (event && event.registeredCount > 0) {
    event.registeredCount--
  }

  showNotification("Registro cancelado", "success")
  showEvents() // Refrescar vista
}

// Abrir modal para crear/editar evento
function openEventModal(eventId = null) {
  const modal = document.getElementById("modal")
  const title = document.getElementById("modal-title")
  const form = document.getElementById("event-form")

  if (eventId) {
    const event = events.find((e) => e.id === eventId)
    title.textContent = "Editar Evento"

    // Llenar formulario con datos del evento
    document.getElementById("event-id").value = event.id
    document.getElementById("event-title").value = event.title
    document.getElementById("event-description").value = event.description
    document.getElementById("event-date").value = event.date
    document.getElementById("event-time").value = event.time
    document.getElementById("event-location").value = event.location
    document.getElementById("event-capacity").value = event.capacity
    document.getElementById("event-category").value = event.category
    document.getElementById("event-price").value = event.price
  } else {
    title.textContent = "Crear Evento"
    form.reset()
    document.getElementById("event-id").value = ""
  }

  modal.style.display = "block"
}

// Editar evento
function editEvent(eventId) {
  openEventModal(eventId)
}

// Manejar envío del formulario de evento
function handleEventSubmit(e) {
  e.preventDefault()

  const eventId = document.getElementById("event-id").value
  const eventData = {
    title: document.getElementById("event-title").value,
    description: document.getElementById("event-description").value,
    date: document.getElementById("event-date").value,
    time: document.getElementById("event-time").value,
    location: document.getElementById("event-location").value,
    capacity: Number.parseInt(document.getElementById("event-capacity").value),
    category: document.getElementById("event-category").value,
    price: Number.parseFloat(document.getElementById("event-price").value) || 0,
  }

  if (eventId) {
    // Editar evento existente
    const eventIndex = events.findIndex((e) => e.id === Number.parseInt(eventId))
    if (eventIndex !== -1) {
      events[eventIndex] = { ...events[eventIndex], ...eventData }
      showNotification("Evento actualizado exitosamente", "success")
    }
  } else {
    // Crear nuevo evento
    const newEvent = {
      id: events.length + 1,
      ...eventData,
      createdBy: currentUser.id,
      registeredCount: 0,
    }
    events.push(newEvent)
    showNotification("Evento creado exitosamente", "success")
  }

  closeModal()
  showEvents()
}

// Eliminar evento
function deleteEvent(eventId) {
  if (confirm("¿Estás seguro de que quieres eliminar este evento?")) {
    const eventIndex = events.findIndex((e) => e.id === eventId)
    if (eventIndex !== -1) {
      events.splice(eventIndex, 1)

      // Eliminar registros relacionados
      registrations = registrations.filter((r) => r.eventId !== eventId)

      showNotification("Evento eliminado", "success")
      showEvents()
    }
  }
}

// Eliminar usuario (solo admin)
function deleteUser(userId) {
  if (confirm("¿Estás seguro de que quieres eliminar este usuario?")) {
    const userIndex = users.findIndex((u) => u.id === userId)
    if (userIndex !== -1) {
      users.splice(userIndex, 1)

      // Eliminar registros del usuario
      registrations = registrations.filter((r) => r.userId !== userId)

      showNotification("Usuario eliminado", "success")
      showAdmin()
    }
  }
}

// Eliminar registro
function deleteRegistration(regId) {
  if (confirm("¿Estás seguro de que quieres eliminar este registro?")) {
    const regIndex = registrations.findIndex((r) => r.id === regId)
    if (regIndex !== -1) {
      const registration = registrations[regIndex]
      registrations.splice(regIndex, 1)

      // Actualizar contador del evento
      const event = events.find((e) => e.id === registration.eventId)
      if (event && event.registeredCount > 0) {
        event.registeredCount--
      }

      showNotification("Registro eliminado", "success")
      showAdmin()
    }
  }
}

// Cerrar modal
function closeModal() {
  document.getElementById("modal").style.display = "none"
}

// Obtener nombre de categoría
function getCategoryName(category) {
  const categories = {
    technology: "Tecnología",
    music: "Música",
    sports: "Deportes",
    education: "Educación",
    art: "Arte",
  }
  return categories[category] || category
}

// Mostrar notificación
function showNotification(message, type = "success") {
  const notification = document.getElementById("notification")
  notification.textContent = message
  notification.className = `notification ${type}`
  notification.style.display = "block"

  setTimeout(() => {
    notification.style.display = "none"
  }, 3000)
}

// Cerrar modal al hacer clic fuera
window.onclick = (event) => {
  const modal = document.getElementById("modal")
  if (event.target === modal) {
    closeModal()
  }
}
